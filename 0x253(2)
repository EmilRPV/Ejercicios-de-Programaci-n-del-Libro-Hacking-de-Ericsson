section .data
    msg db 'Hello, world!', 0xA  ; Mensaje seguido de salto de línea (0xA)

section .text
    global _start                 ; Entrada del programa

_start:
    ; Inicializar el contador 'i' a 0
    xor rdi, rdi                  ; rdi = 0 (contador i)

loop_start:
    ; Comparar 'i' con 10 (rdi < 10)
    cmp rdi, 10
    jge loop_end                  ; Si 'i' >= 10, salir del bucle

    ; Llamar a la syscall 'write' (syscall número 1)
    ; write(fd, buffer, count)
    mov rax, 1                    ; syscall número 1 (write)
    mov rdi, 1                    ; fd = 1 (salida estándar)
    mov rsi, msg                  ; rsi = dirección del mensaje
    mov rdx, 14                   ; rdx = longitud del mensaje (13 caracteres + 1 de salto de línea)
    syscall                       ; Llamar al sistema para escribir

    ; Incrementar el contador 'i' (rdi++)
    inc rdi

    ; Volver al inicio del bucle
    jmp loop_start

loop_end:
    ; Salir del programa (syscall exit)
    mov rax, 60                   ; syscall número 60 (exit)
    xor rdi, rdi                  ; código de salida 0
    syscall                       ; Llamar al sistema para salir
